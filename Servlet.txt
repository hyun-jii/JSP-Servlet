■■■ Servlet(서블릿) ■■■

1. JSP에서 정적인 부분을 담당하고, Servlet 에서는 동적인 처리를 위한
   부분으로 사용되어 보다 효율적인 웹 어플리케이션을 구축할 수 있다.

2. JSP 는 내부적으로 Web Container 가 Servlet 으로 변경시켜준다.

3. WEB-INF 는 환경 설정 파일이 저장되는 곳(-> 외부에서는 접근 불가/금지) 
   - lib : 라이브러리 파일을 저장(ojdbc6.jar, jstl.jar 등)
   - J2SE
   - J2EE
   - classes : class 파일이 저장(servlet)
     『classes > com > util > MyUtil.class』
     원래 이렇게 만들어야 하지만 이클립스가 자동으로 연결
     실제 위치는
     『C:\WebStudy\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\WebApp0004\org\apache\jsp』

      * .jar : java
      * .war : web(프로젝트 아래 모든 것을 압축할 때)
      * .ear : jar + war
      web.xml : context path 의 환경 설정

4.  『init()』 과 『destroy()』 는 단 한 번 호출되며
    『service()』 는 클라이언트의 요청이 있을 때 마다 호출하게 된다.
     이제는 JSP를 『service()』 메소드 내부에 코딩하는 것과 같다.

5.  『GenericServlet』 이나 『HttpServlet』 을 활용한다.

6.  URL 패턴을 지정하는 방법은 크게 3가지 이다.
    (/a, /*, *.do)

7.  web.xml 을 수정하면 서버를 꼭 재구동한 이후에 실행해야 한다.

8.  지금까지는 JSP(입력) -> JSP(처리, 결과) 였으나,
    Servlet 은 JSP(입력) -> Servlet(결과를 위한 처리) -> JSP(결과) 방식이다.

--------------------------------------------------------------------------------------------------------------------
○ Servlet 의 첫 번째 실습
   
   - Test1.java
   - web.xml


   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/test1
     ------------------------------
        http://www.hhs.co.kr       /test1


--------------------------------------------------------------------------------------------------------------------
○ Servlet 의 두 번째 실습

   - Test2.jsp
   - Test2.java
   - Test2_result.jsp
   - web.xml

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/test2.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 의 세 번째 실습 -> EL 활용

   - Test3.jsp

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/Test3.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 의 네 번째 실습 -> JSTL 활용

   - Test4.jsp

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/Test4.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 실습 5 -> JSTL 활용

   - Test5.jsp

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/Test5.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 실습 6 -> EL / JSTL 활용

   - MyData.java
   - Test6.jsp
   - Test6_result.jsp

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/Test6.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 실습 7 -> EL / JSTL 활용

   - Test7.jsp

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/Test7.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 실습 8 -> EL / JSTL 활용

   - Test8.jsp

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/Test8.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 문제 -> EL / JSTL 활용
   JSTL Core 를 활용하여 구구단 출력 페이지를 구성한다.

   - Gugudan.jsp

   - 사용자 최초 요청 페이지
     http://localhost:8090/WebApp17/Gugudan.jsp

--------------------------------------------------------------------------------------------------------------------
○ Servlet 문제 -> EL / JSTL 활용
   JSTL Core 를 활용하여 다음과 같은 기능을 포함하는 페이지를 구현한다.

   다섯 명의 회원의 이름과 전화번호와 주소를 입력받아
   그 입력된 내용으로 객체를 구성하고...
   그렇게 구성된 객체의 속성을
   반복적으로 출력하는 기능을 갖는다.

   - MemberInsertForm.jsp	-> 회원 정보 입력 페이지(5명 몽땅)
   - MemberDTO.java  		-> 사용자 정의 자료형 클래스
   - MemberInsert.jsp		-> 수신된 데이터로 컬렉션 구성
   - MemberList.jsp		-> 명단 출력 페이지















